@model Test
@{
    Layout = "/Views/Tests/Layouts/_TestRecordLayout.cshtml";
    ViewData["Title"] = "TestRecord";
}
<div class="container-fluid">
    <div class="col-xs-12 col-md-4">
        <div class="col-xs-12 text-center"><h1>Test info</h1></div>
        <h2>Tets name: <strong>@Model.TestName</strong></h2>
        <h2>Author: <strong>@Model.AppUser.UserName</strong></h2>
        <h2>Question amount: <strong>@Model.TestQuestions.Count</strong></h2>
        <h2>Report amount: <strong>@Model.TestReports.Count</strong></h2>
        @{var rating = Model.TestMarks.Count(tm => tm.EnjoyedTest) - Model.TestMarks.Count(tm => !tm.EnjoyedTest); }
        <h2>Test rating: <strong>@rating</strong></h2>
        <h2>Tries amount: <strong>@Model.TestResults.Count</strong></h2>
        @{ var avgMark = Model.TestResults.Average(tr => tr.Score);}
        <h2>Average test results: <strong>@avgMark</strong></h2>
        @{
            var doubleAverageTicks = Model.TestResults.Average(tr => (tr.FinishTime - tr.StartTime).Ticks);
            long longAverageTicks = Convert.ToInt64(doubleAverageTicks);

            var avgTime = new TimeSpan(longAverageTicks).StripMilliseconds();
         }
        <h2>Average test time: <strong>@avgTime</strong></h2>
    </div>
    <div class="col-xs-12 col-md-8">
        <div class="col-xs-12 text-center"><h1>User results</h1></div>
        <table class="table">
            <thead>
                <tr>
                    <th>
                        №
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.TestResults.First().Score)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.TestResults.First().AppUser.UserName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.TestResults.First().StartTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.TestResults.First().FinishTime)
                    </th>
                    <th>
                        Test time
                    </th>
                </tr>
            </thead>
            <tbody>
                @{ var counter = 1; }
                @foreach (var item in Model.TestResults.OrderByDescending(tr => tr.Score))
                {
                    <tr>
                        <td>
                            <b>@counter</b>
                        </td>
                        <td>
                            <strong>@Html.DisplayFor(modelItem => item.Score)</strong> / @Model.TestQuestions.Count
                        </td>
                        <td>
                            <a asp-action="Index" asp-controller="Profile" asp-route-id="@item.AppUser.Id">@Html.DisplayFor(modelItem => item.AppUser.UserName)</a>
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StartTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FinishTime)
                        </td>
                        <td>
                            @((item.FinishTime - item.StartTime).Duration().StripMilliseconds())
                        </td>
                    </tr>
                    counter++;
                }
            </tbody>
        </table>


    </div>
</div>

