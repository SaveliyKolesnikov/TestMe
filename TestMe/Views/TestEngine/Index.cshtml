@model TestMe.Models.Test
@{

}
<div id="mainContainer" class="container-fluid">
    <div id="startTestElem" class="row">
        @Html.AntiForgeryToken()
        <h1 class="text-center col-md-12">@Model.TestName</h1>
        <h2 class="col-md-12">Author: @Model.AppUser.UserName</h2>
        <h3 class="col-md-12">Creation date: @Model.CreationDate</h3>
        <h4 class="col-md-12">Question amount: @Model.TestQuestions.Count</h4>
        <input type="hidden" value="@Model.TestCode" id="testCode" />
        <button type="button" class="btn btn-primary btn-lg center-block col-md-12" id="startButton" onclick="startTest()">Start test</button>
    </div>
    <div id="questionBlock" class="row" display="none">
        @Html.AntiForgeryToken()
        <fieldset id="testQuestionFieldSet" class="col-md-12">
            <legend id="questionText">
            </legend>
        </fieldset>
        <div id="navButtons" class="row">
            <button id="prevQuestionButton" class="btn btn-primary col-md-offset-0 col-md-2 col-xs-8 col-xs-offset-2" onclick="getPrevQuestion()">Prev question</button>
            <button id="answerButton" class="btn btn-success col-md-offset-3 col-md-2 col-xs-8 col-xs-offset-2" onclick="CheckAnswer()">Check answer</button>
            <button id="nextQuestionButton" class="btn btn-primary col-md-offset-3 col-md-2 col-xs-8 col-xs-offset-2" onclick="getNextQuestion()">Next question</button>
            <button id="finishTest" class="btn btn-primary col-md-offset-5 col-md-2 col-xs-8 col-xs-offset-2" onclick="finishTest()">Finish test</button>
        </div>
        <div id="questions" class="row">

        </div>
    </div>
</div>
@if (!User.Identity.IsAuthenticated)
{
    <div id="backGround">

    </div>
    <form id="userName">
        @Html.AntiForgeryToken()
        <div id="userNameLabel" class="text-center"><label for="userNameField">Enter your name</label></div>
        <input type="text" id="userNameField" class="form-control">
        <button type="button" id="userNameButton" class="btn btn-primary center-block" onclick="setUserName()">Confirm</button>
    </form>

}


@section Scripts{
    <script type="text/javascript">
        function setUserName() {
            var token = $('input[name="__RequestVerificationToken"]', $('#startTestElem')).val();
            var myData = { userName: $("#userName > #userNameField").val() };
            var dataWithAntiforgeryToken = $.extend(myData, { '__RequestVerificationToken': token });

            $.ajax({
                url: "/TestEngine/SetUserName",
                type: "POST",
                data: dataWithAntiforgeryToken,
                success: function (data) {
                    $('#userName').remove();
                    $('#backGround').remove();
                },
                error: function () {
                    //$("#questionForm").empty();
                }
            });
        }
        function getUserName() {
            var token = $('input[name="__RequestVerificationToken"]', $('#questionBlock')).val();
            var dataWithAntiforgeryToken = { '__RequestVerificationToken': token };
            $.ajax({
                url: "/TestEngine/GetUserName",
                type: "POST",
                data: dataWithAntiforgeryToken,
                success: function (data) {
                    $('<h5/>', { text: 'Username: ' + data }).insertAfter('#questionText > h1');
                },
                error: function () {
                    //$("#questionForm").empty();
                }
            });
        }
        function startTest() {
            var token = $('input[name="__RequestVerificationToken"]', $('#startTestElem')).val();
            var myData = { code: $("#testCode").val() };
            var dataWithAntiforgeryToken = $.extend(myData, { '__RequestVerificationToken': token });

            $.ajax({
                url: "/TestEngine/StartTest",
                type: "POST",
                data: dataWithAntiforgeryToken,
                success: function (data) {
                    ConfigureForTheFirstQuestion(data);
                    getQuestionsId();
                },
                error: function () {
                    //$("#questionForm").empty();
                }
            });
        }
        function CheckAnswer(questionId, checkedArray) {
            var token = $('input[name="__RequestVerificationToken"]', $('#questionBlock')).val();
            if (checkedArray === undefined) {
                checkedArray = new Array();
                $('input[name="answer"]:checked').each(function () {
                    checkedArray.push(this.value);
                });
            }

            var myData = { checkedIds: checkedArray };
            if (typeof questionId !== 'number') {
                questionId = $("#testQuestionFieldSet").data('id');
            }
            var testCode = $("#testQuestionFieldSet").data("testCode");
            myData = $.extend(myData, { 'questionId': questionId });
            myData = $.extend(myData, { 'testCode': testCode });
            var dataWithAntiforgeryToken = $.extend(myData, { '__RequestVerificationToken': token });
            $.ajax({
                url: "/TestEngine/CheckAnswer",
                type: "POST",
                data: dataWithAntiforgeryToken,
                success: function (data) {
                    showCorrectAnswer(data, checkedArray);
                },
                error: function () {
                    //$("#questionBlock").append('<h5> Internal error. Try again</h5>');
                }
            });

        }
        function getNextQuestion() {
            var token = $('input[name="__RequestVerificationToken"]').val();
            var myData = { questionId: $("#testQuestionFieldSet").data("id") };
            var dataWithAntiforgeryToken = $.extend(myData, { '__RequestVerificationToken': token });

            $.ajax({
                url: "/TestEngine/GetNextQuestion",
                type: "POST",
                data: dataWithAntiforgeryToken,
                success: function (data) {
                    appendQuestion(data);
                    getIfAlreadyAswered(data);
                },
                error: function () {
                    //$("#questionForm").empty();
                }
            });
        }
        function getPrevQuestion() {
            var token = $('input[name="__RequestVerificationToken"]').val();
            var myData = { questionId: $("#testQuestionFieldSet").data("id") };
            var dataWithAntiforgeryToken = $.extend(myData, { '__RequestVerificationToken': token });

            $.ajax({
                url: "/TestEngine/GetPrevQuestion",
                type: "POST",
                data: dataWithAntiforgeryToken,
                success: function (data) {
                    appendQuestion(data);
                    getIfAlreadyAswered(data);
                        //$("#prevQuestionButton").prop('disabled', false);
                },
                error: function () {
                   // $("#questionForm").empty();
                }
            });
        }
        function getQuestion(questionId) {
            var token = $('input[name="__RequestVerificationToken"]').val();
            var myData = { questionId: questionId };
            var dataWithAntiforgeryToken = $.extend(myData, { '__RequestVerificationToken': token });

            $.ajax({
                url: "/TestEngine/GetQuestion",
                type: "POST",
                data: dataWithAntiforgeryToken,
                success: function (data) {
                    appendQuestion(data);
                    getIfAlreadyAswered(data);
                },
                error: function () {
                    //$("#questionForm").empty();
                }
            });
        }
        function getIfAlreadyAswered(questionAnswers) {
            var token = $('input[name="__RequestVerificationToken"]').val();
            var myData = { questionId: $("#testQuestionFieldSet").data("id") };
            var dataWithAntiforgeryToken = $.extend(myData, { '__RequestVerificationToken': token });

            $.ajax({
                url: "/TestEngine/GetIfAlreadyAnswered",
                type: "POST",
                data: dataWithAntiforgeryToken,
                success: function (data) {
                    if (data != "notAnswered")
                        CheckAnswer(questionAnswers, data);
                },
                error: function () {
                    //$("#questionForm").empty();
                }
            });
        }
        function getQuestionsId() {
            var token = $('input[name="__RequestVerificationToken"]').val();
            var dataWithAntiforgeryToken = { '__RequestVerificationToken': token };

            $.ajax({
                url: "/TestEngine/GetQuestionsIds",
                type: "POST",
                data: dataWithAntiforgeryToken,
                success: function (data) {
                    displayQuestionNav(data);
                },
                error: function () {
                    //$("#questionForm").empty();
                }
            });
        }
        function displayQuestionNav(questionIds) {
            $('#mainContainer').data('questAmount', questionIds.length);
            for (let i = 0; i < questionIds.length; i++) {
                let button = $('<button/>', {
                    type: 'button',
                    class: 'btn btn-info',
                    value: questionIds[i],
                    text: (i + 1),
                    click: function () {
                        var prevButton = $('#questions > div > button.btn-primary');
                        if (!prevButton.hasClass('btn-success') && !prevButton.hasClass('btn-danger'))
                            prevButton.addClass('btn-info');

                        prevButton.removeClass('btn-primary');
                        $(this).removeClass('btn-info');
                        $(this).addClass('btn-primary');
                        getQuestion($(this).attr('value'));
                    }
                })
                $('<div/>', { class: 'col-xs-1' }).append(button).appendTo('div#questions');
            }
            $('#questions > button:first-child').addClass('btn-primary');
        }
        function ConfigureForTheFirstQuestion(question) {
            $('#questionBlock').show();
            $('#startTestElem').remove();
            $('#questionText').append('<h1></h1>');
            appendQuestion(question);
            getUserName();
        }
        function appendQuestion(question) {
            $('#testQuestionFieldSet div').remove();
            $('#answerMessage').remove();
            $('#answerButton').show();
            $('#questionText h1').text(question.questionText);
            $('#testQuestionFieldSet').data('testCode', question.test.testCode);
            $('#testQuestionFieldSet').data('id', question.id);
            question.testAnswers.forEach(function (element) {
                var input = $('<input/>', { type: 'checkbox', name: 'answer', value: element.id });
                var label = $('<label/>', { text: element.answerText });
                var div = $('<div/>');
                input.appendTo(div);
                label.appendTo(div);
                div.appendTo('#testQuestionFieldSet');
            });
        }
        function showCorrectAnswer(questionAnswers, userAnswers) {
            userAnswers.forEach(function (element) {
                $("input[type=checkbox][value='" + element + "']").closest("div").css("color", "red");
                $("input[type=checkbox][value='" + element + "']").prop('checked', true);
            });

            questionAnswers.forEach(function (element) {
                $("input[type=checkbox][value='" + element + "']").closest('div').css('color', 'green');
            });
            var navButton = $('button[value="' + $('#testQuestionFieldSet').data('id') + '"]');
            navButton.removeClass('btn-info');
            var div = $('<div/>', { id: 'answerMessage', class: 'text-center text-primary col-md-offset-3 col-md-2 col-xs-8 col-xs-offset-2' });
            if (isAllCorrect(questionAnswers, userAnswers)) {
                var h3 = $('<h3/>', { class: 'text-center text-success isCorrectText ', text: 'Correct' });
                navButton.addClass('btn-success');
            }
            else {
                var h3 = $('<h3/>', { class: 'text-center text-danger isCorrectText', text: 'Incorrect' });
                navButton.addClass('btn-danger');
            }
            $('#answerButton').hide();
            $('#answerMessage').remove();
            div.append(h3);
            div.insertAfter($('#prevQuestionButton'));
            $('input[name="answer"]').each(function () {
                $(this).prop('disabled', true);
            });

        }
        function isAllCorrect(questionAnswers, userAnswered) {
            if (questionAnswers.length !== userAnswered.length)
                return false;
            for (var i = questionAnswers.length; i--;) {
                if (questionAnswers[i] != userAnswered[i])
                    return false;
            }

            return true;
        }
        function finishTest() {
            var token = $('input[name="__RequestVerificationToken"]').val();
            var dataWithAntiforgeryToken = { '__RequestVerificationToken': token };

            $.ajax({
                url: "/TestEngine/FinishTest",
                type: "POST",
                data: dataWithAntiforgeryToken,
                success: function (data) {
                    showResult(data);
                },
                error: function () {
                    //$("#questionForm").empty();
                }
            });
        }
        function showResult(score) {
            $('#questionBlock').remove();
            $('#mainContainer').append('<h1> Your score: ' + score + 'out of ' + $('#mainContainer').data('questAmount') + '</h1>');
        }
        //$('#startButton').on('click', startTest);
        $("#questionBlock").hide();
    </script>
}

