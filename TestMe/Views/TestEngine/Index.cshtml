@model TestMe.Models.Test
@{

}
<div class="container-fluid">
    <div id="startTestElem">
        @Html.AntiForgeryToken()
        <h1 class="text-center">@Model.TestName</h1>
        <h2>Author: @Model.AppUser.UserName</h2>
        <h3>Creation date: @Model.CreationDate</h3>
        <h4>Question amount: @Model.TestQuestions.Count</h4>
        <input type="hidden" value="@Model.TestCode" id="testCode" />
        <button type="button" class="btn btn-primary btn-lg center-block" id="startButton">Start test</button>
    </div>
    <div id="questionBlock"  display="none">
        @Html.AntiForgeryToken()
        <fieldset id="testQuestionFieldSet">
            <legend id="questionText">
                <div class="row">

                </div>
            </legend>
        </fieldset>

    </div>
</div>

@section Scripts{
    <script type="text/javascript">
        function startTest() {
            var token = $('input[name="__RequestVerificationToken"]', $('#startTestElem')).val();
            var myData = { code: $("#testCode").val() };
            var dataWithAntiforgeryToken = $.extend(myData, { '__RequestVerificationToken': token });

            $.ajax({
                url: "/TestEngine/StartTest",
                type: "POST",
                data: dataWithAntiforgeryToken,
                success: function (data) {
                    ConfigureForTheFirstQuestion(data);
                },
                error: function () {
                    $("#questionForm").empty();
                }
            });
        }
        function CheckAnswer() {
            var token = $('input[name="__RequestVerificationToken"]', $('#questionBlock')).val();
            var checkedArray = new Array();
            $('input[name="answer"]:checked').each(function () {
                checkedArray.push(this.value);
            });

            var myData = { checkedIds: checkedArray };
            var questionId = $("#testQuestionFieldSet").data('id');
            var testCode = $("#testQuestionFieldSet").data("testCode");
            myData = $.extend(myData, { 'questionId': questionId });
            myData = $.extend(myData, { 'testCode': testCode });
            var dataWithAntiforgeryToken = $.extend(myData, { '__RequestVerificationToken': token });
            $.ajax({
                url: "/TestEngine/CheckAnswer",
                type: "POST",
                data: dataWithAntiforgeryToken,
                success: function (data) {
                    if (data !== "error") {
                        showCorrectAnswer(data, checkedArray);
                    }
                    else {
                        $("#questionBlock").append('<h5> Internal error. Try again</h5>');
                    }
                },
                error: function () {
                    $("#questionBlock").append('<h5> Internal error. Try again</h5>');
                }
            });

        }
        function getNextQuestion(){
            var token = $('input[name="__RequestVerificationToken"]').val();
            var myData = { questionId: $("#testQuestionFieldSet").data("id") };
            var dataWithAntiforgeryToken = $.extend(myData, { '__RequestVerificationToken': token });

            $.ajax({
                url: "/TestEngine/GetNextQuestion",
                type: "POST",
                data: dataWithAntiforgeryToken,
                success: function (data) {
                    if (data !== "error")
                        appendQuestion(data);
                    else
                        alert("nani???");
                },
                error: function () {
                    $("#questionForm").empty();
                }
            });
        }
        function getPrevQuestion() {
            var token = $('input[name="__RequestVerificationToken"]').val();
            var myData = { questionId: $("#testQuestionFieldSet").data("id") };
            var dataWithAntiforgeryToken = $.extend(myData, { '__RequestVerificationToken': token });

            $.ajax({
                url: "/TestEngine/GetPrevQuestion",
                type: "POST",
                data: dataWithAntiforgeryToken,
                success: function (data) {
                    if (data !== "error")
                        appendQuestion(data);
                    else
                        alert("nani???");
                },
                error: function () {
                    $("#questionForm").empty();
                }
            });
        }
        function ConfigureForTheFirstQuestion(question)
        {
            $("#questionForm").show(); 
            $("#startTestElem").remove();
            appendQuestion(question);
        }
        function appendQuestion(question) {
            $("#testQuestionFieldSet").empty();
            $('<legend/>', { id: 'questionText' }).appendTo("#testQuestionFieldSet");
           // $("#testQuestionFieldSet").append()
            //$("#questionText").empty();
            $("#questionText").append("<h1>" + question.questionText + "</h1>");
            $("#testQuestionFieldSet").data("testCode", question.test.testCode);
            $("#testQuestionFieldSet").data("id", question.id);
            question.testAnswers.forEach(function (element) {
                var input = $('<input/>', { type: 'checkbox', name: 'answer', value: element.id });
                var label = $('<label/>', { text: element.answerText });
                var div = $('<div/>');
                input.appendTo(div);
                label.appendTo(div);
                div.appendTo("#testQuestionFieldSet");
                //$("#testQuestionFieldSet").append('<div><input type ="checkbox" name="answer" value="' + element.id + '">' + element.answerText + "</input></div>");
            });
            var buttonsRow = $('<div/>', { class: 'row' });
            $('<button/>', { text: 'Prev question', id: 'prevQuestionButton', class: 'btn btn-primary col-sm-2', click: getPrevQuestion }).appendTo(buttonsRow);
            $('<button/>', { text: 'Check answer', id: 'answerButton', class: 'btn btn-success col-sm-offset-3 col-sm-2', click: CheckAnswer }).appendTo(buttonsRow);
            $('<button/>', { text: 'Next question', id: 'nextQuestionButton', class: 'btn btn-primary col-sm-offset-3 col-sm-2', click: getNextQuestion }).appendTo(buttonsRow);
            buttonsRow.appendTo("#testQuestionFieldSet")
        }
        function showCorrectAnswer(questionAnswers, userAnswers) {
            userAnswers.forEach(function (element) {
                    $("input[type=checkbox][value='" + element + "']").closest("div").css("color", "red");
                });

                questionAnswers.forEach(function (element) {
                    $("input[type=checkbox][value='" + element + "']").closest("div").css("color", "green");
            });
            if (isAllCorrect(questionAnswers, userAnswers)) {
                var div = $('<div/>', { class: 'text-center text-primary col-sm-offset-3 col-sm-2' });
                var h2 = $('<h3/>', { class: 'text-success isCorrectText', text: 'Correct' });
            }
            else {
                var div = $('<div/>', { class: 'text-center text-primary col-sm-offset-3 col-sm-2' });
                var h2 = $('<h3/>', { class: 'text-danger isCorrectText', text: 'Incorrect' });
            }
            $("#answerButton").remove();
            div.append(h2);
            div.insertAfter($("#prevQuestionButton"));
            //$("#nextQuestionButton").removeClass("col-sm-offset-3");
           //$("#nextQuestionButton").addClass("col-sm-offset-8");
            $('input[name="answer"]').each(function () {
                $(this).prop('disabled', true);
            });
        }
        function isAllCorrect(questionAnswers, userAnswered) {
            if (questionAnswers.length !== userAnswered.length)
                return false;
            for (var i = questionAnswers.length; i--;) {
                if (questionAnswers[i] != userAnswered[i])
                    return false;
            }

            return true;
        }
        $("#startButton").on("click", startTest);
    </script>
}

